<!DOCTYPE html>
<html lang="es" data-bs-theme="light">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>MiDashBoard - Panel Completo</title>
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Bootstrap Icons -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
  <!-- Chart.js -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <!-- SweetAlert2 -->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <style>
    :root {
      --bg-color: #f8f9fa;
      --text-color: #212529;
      --card-bg: #ffffff;
      --sidebar-width: 250px;
      --navbar-height: 70px;
    }

    [data-bs-theme="dark"] {
      --bg-color: #212529;
      --text-color: #f8f9fa;
      --card-bg: #2c3034;
    }

    body {
      background-color: var(--bg-color);
      color: var(--text-color);
      transition: all 0.3s ease;
    }

    /* Main Content Styles */
    .main-content {
      margin-left: var(--sidebar-width);
      padding: 20px;
      padding-top: calc(var(--navbar-height) + 20px);
      min-height: 100vh;
      transition: margin-left 0.3s ease;
    }

    /* Card Styles */
    .card {
      background-color: var(--card-bg);
      border: none;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      transition: all 0.3s ease;
      margin-bottom: 20px;
      height: 100%;
    }

    .card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
    }

    .card-title {
      color: var(--text-color);
      font-weight: 600;
    }

    /* Chart Container */
    .chart-container {
      position: relative;
      height: 300px;
      width: 100%;
    }

    /* Stats Cards */
    .stat-card {
      border-left: 4px solid;
      transition: all 0.3s ease;
    }

    .stat-card:hover {
      transform: translateY(-3px);
    }

    .stat-card .bi {
      font-size: 2rem;
      opacity: 0.7;
    }

    /* Color Themes for Cards */
    .stat-card.recetas { border-left-color: #4e73df; }
    .stat-card.insumos { border-left-color: #1cc88a; }
    .stat-card.gastos { border-left-color: #f6c23e; }
    .stat-card.entradas { border-left-color: #36b9cc; }
    .stat-card.platos { border-left-color: #e74a3b; }
    .stat-card.postres { border-left-color: #6f42c1; }
    .stat-card.bebidas { border-left-color: #fd7e14; }

    /* Badge Styles */
    .badge-entrada { background-color: #36b9cc; }
    .badge-plato { background-color: #e74a3b; }
    .badge-postre { background-color: #6f42c1; }
    .badge-bebida { background-color: #fd7e14; }
    .badge-gasto { background-color: #f6c23e; color: #212529; }
    .badge-insumo { background-color: #1cc88a; }

    /* Table Styles */
    .table-responsive {
      max-height: 300px;
      overflow-y: auto;
    }

    /* Responsive Adjustments */
    @media (max-width: 767.98px) {
      .main-content {
        margin-left: 0;
        padding-top: 60px;
      }
      
      .stat-card {
        margin-bottom: 15px;
      }
    }

    /* Animation */
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }

    .animated-card {
      animation: fadeIn 0.6s ease-out forwards;
    }

    .delay-1 { animation-delay: 0.2s; }
    .delay-2 { animation-delay: 0.4s; }
    .delay-3 { animation-delay: 0.6s; }
    .delay-4 { animation-delay: 0.8s; }
  </style>
</head>
<body>
  <%- include('load/index') %>
  <%- include('load/nav-header') %>
  <br>
  <br>
  <main class="main-content">
    <!-- Breadcrumb -->
    <nav aria-label="breadcrumb" class="mb-4">
      <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/"><i class="bi bi-house-door"></i> Inicio</a></li>
        <li class="breadcrumb-item active" aria-current="page"><i class="bi bi-speedometer2"></i> Panel Completo</li>
      </ol>
    </nav>

    <h1 class="mb-4"><i class="bi bi-speedometer2"></i> Panel de Control</h1>

    <!-- Resumen General -->
    <div class="row mb-4">
      <div class="col-xl-3 col-md-6 mb-4 animated-card">
        <div class="card stat-card recetas h-100">
          <div class="card-body">
            <div class="row no-gutters align-items-center">
              <div class="col mr-2">
                <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                  Total Recetas</div>
                <div class="h5 mb-0 font-weight-bold" id="totalRecipes">0</div>
              </div>
              <div class="col-auto">
                <i class="bi bi-book text-primary"></i>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div class="col-xl-3 col-md-6 mb-4 animated-card delay-1">
        <div class="card stat-card insumos h-100">
          <div class="card-body">
            <div class="row no-gutters align-items-center">
              <div class="col mr-2">
                <div class="text-xs font-weight-bold text-success text-uppercase mb-1">
                  Total Insumos</div>
                <div class="h5 mb-0 font-weight-bold" id="totalInsumos">0</div>
              </div>
              <div class="col-auto">
                <i class="bi bi-basket text-success"></i>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div class="col-xl-3 col-md-6 mb-4 animated-card delay-2">
        <div class="card stat-card gastos h-100">
          <div class="card-body">
            <div class="row no-gutters align-items-center">
              <div class="col mr-2">
                <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">
                  Total Gastos</div>
                <div class="h5 mb-0 font-weight-bold" id="totalGastos">$0.00</div>
              </div>
              <div class="col-auto">
                <i class="bi bi-cash-stack text-warning"></i>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div class="col-xl-3 col-md-6 mb-4 animated-card delay-3">
        <div class="card stat-card platos h-100">
          <div class="card-body">
            <div class="row no-gutters align-items-center">
              <div class="col mr-2">
                <div class="text-xs font-weight-bold text-danger text-uppercase mb-1">
                  Gastos Promedio</div>
                <div class="h5 mb-0 font-weight-bold" id="gastoPromedio">$0.00</div>
              </div>
              <div class="col-auto">
                <i class="bi bi-graph-up text-danger"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Sección de Recetas -->
    <div class="row mb-4">
      <div class="col-md-12">
        <div class="card">
          <div class="card-header bg-primary text-white">
            <h4 class="mb-0"><i class="bi bi-book"></i> Estadísticas de Recetas</h4>
          </div>
          <div class="card-body">
            <div class="row">
              <div class="col-md-4">
                <div class="card stat-card entradas h-100">
                  <div class="card-body text-center">
                    <h5>Entradas</h5>
                    <h3 id="entradasCount">0</h3>
                  </div>
                </div>
              </div>
              <div class="col-md-4">
                <div class="card stat-card platos h-100">
                  <div class="card-body text-center">
                    <h5>Platos Fuertes</h5>
                    <h3 id="platosCount">0</h3>
                  </div>
                </div>
              </div>
              <div class="col-md-4">
                <div class="card stat-card postres h-100">
                  <div class="card-body text-center">
                    <h5>Postres</h5>
                    <h3 id="postresCount">0</h3>
                  </div>
                </div>
              </div>
            </div>
            
            <div class="row mt-4">
              <div class="col-lg-6">
                <div class="chart-container">
                  <canvas id="typeDistributionChart"></canvas>
                </div>
              </div>
              <div class="col-lg-6">
                <div class="chart-container">
                  <canvas id="topIngredientsChart"></canvas>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Sección de Insumos -->
    <div class="row mb-4">
      <div class="col-md-12">
        <div class="card">
          <div class="card-header bg-success text-white">
            <h4 class="mb-0"><i class="bi bi-basket"></i> Estadísticas de Insumos</h4>
          </div>
          <div class="card-body">
            <div class="row">
              <div class="col-lg-6">
                <div class="chart-container">
                  <canvas id="categoriasInsumosChart"></canvas>
                </div>
              </div>
              <div class="col-lg-6">
                <h5>Insumos más utilizados</h5>
                <div class="table-responsive">
                  <table class="table table-hover">
                    <thead>
                      <tr>
                        <th>Insumo</th>
                        <th>Categoría</th>
                        <th>Recetas que lo usan</th>
                      </tr>
                    </thead>
                    <tbody id="topInsumosTable">
                      <!-- Datos se cargarán aquí -->
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Sección de Gastos -->
    <div class="row">
      <div class="col-md-12">
        <div class="card">
          <div class="card-header bg-warning text-dark">
            <h4 class="mb-0"><i class="bi bi-cash-stack"></i> Estadísticas de Gastos</h4>
          </div>
          <div class="card-body">
            <div class="row">
              <div class="col-lg-6">
                <div class="chart-container">
                  <canvas id="gastosPorTipoChart"></canvas>
                </div>
              </div>
              <div class="col-lg-6">
                <div class="chart-container">
                  <canvas id="gastosPorMesChart"></canvas>
                </div>
              </div>
            </div>
            
            <div class="row mt-4">
              <div class="col-12">
                <h5>Últimos Gastos Registrados</h5>
                <div class="table-responsive">
                  <table class="table table-hover">
                    <thead>
                      <tr>
                        <th>Fecha</th>
                        <th>Concepto</th>
                        <th>Establecimiento</th>
                        <th>Monto</th>
                      </tr>
                    </thead>
                    <tbody id="ultimosGastosTable">
                      <!-- Datos se cargarán aquí -->
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>

  <!-- Botón para cambiar tema (dark/light) -->
  <button class="btn btn-sm btn-outline-secondary position-fixed bottom-0 end-0 m-3" onclick="toggleTheme()" data-bs-toggle="tooltip" title="Cambiar tema">
    <i class="bi bi-moon-stars"></i>
  </button>

  <!-- Bootstrap JS (con Popper.js) -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

  <script>
    // Variables globales
    let typeDistributionChart, topIngredientsChart, categoriasInsumosChart, gastosPorTipoChart, gastosPorMesChart;

    // Función para cargar todos los datos
    function loadAllData() {
      // Cargar recetas
      const recipes = [];
      for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i);
        if (key !== 'insumos' && key !== 'gastos' && key !== 'theme') {
          const recipe = JSON.parse(localStorage.getItem(key));
          recipes.push(recipe);
        }
      }

      // Cargar insumos
      const insumos = JSON.parse(localStorage.getItem('insumos')) || [];

      // Cargar gastos
      const gastos = JSON.parse(localStorage.getItem('gastos')) || [];

      // Actualizar estadísticas generales
      updateGeneralStats(recipes, insumos, gastos);
      
      // Actualizar sección de recetas
      updateRecipesSection(recipes);
      
      // Actualizar sección de insumos
      updateInsumosSection(recipes, insumos);
      
      // Actualizar sección de gastos
      updateGastosSection(gastos);
    }

    // Función para actualizar estadísticas generales
    function updateGeneralStats(recipes, insumos, gastos) {
      document.getElementById('totalRecipes').textContent = recipes.length;
      document.getElementById('totalInsumos').textContent = insumos.length;
      
      // Calcular total de gastos
      const totalGastos = gastos.reduce((total, gasto) => {
        return total + parseFloat(gasto.montoTotal || 0);
      }, 0);
      
      document.getElementById('totalGastos').textContent = `$${totalGastos.toFixed(2)}`;
      
      // Calcular gasto promedio
      const gastoPromedio = gastos.length > 0 ? totalGastos / gastos.length : 0;
      document.getElementById('gastoPromedio').textContent = `$${gastoPromedio.toFixed(2)}`;
    }

    // Función para actualizar sección de recetas
    function updateRecipesSection(recipes) {
      // Contar por tipo
      const entradas = recipes.filter(r => r.type === 'entrada').length;
      const platos = recipes.filter(r => r.type === 'plato fuerte').length;
      const postres = recipes.filter(r => r.type === 'postre').length;
      const bebidas = recipes.filter(r => r.type === 'bebida').length;
      
      document.getElementById('entradasCount').textContent = entradas;
      document.getElementById('platosCount').textContent = platos;
      document.getElementById('postresCount').textContent = postres;
      document.getElementById('bebidasCount').textContent = bebidas;

      // Gráfico de distribución por tipo
      updateTypeDistributionChart(recipes);
      
      // Gráfico de ingredientes más usados
      updateTopIngredientsChart(recipes);
    }

    // Gráfico de distribución por tipo de receta
    function updateTypeDistributionChart(recipes) {
      const typeData = {
        'entrada': recipes.filter(r => r.type === 'entrada').length,
        'plato fuerte': recipes.filter(r => r.type === 'plato fuerte').length,
        'postre': recipes.filter(r => r.type === 'postre').length,
        'bebida': recipes.filter(r => r.type === 'bebida').length
      };

      const ctx = document.getElementById('typeDistributionChart').getContext('2d');
      
      if (typeDistributionChart) {
        typeDistributionChart.destroy();
      }

      typeDistributionChart = new Chart(ctx, {
        type: 'pie',
        data: {
          labels: Object.keys(typeData),
          datasets: [{
            data: Object.values(typeData),
            backgroundColor: [
              'rgba(54, 185, 204, 0.8)',
              'rgba(231, 74, 59, 0.8)',
              'rgba(111, 66, 193, 0.8)',
              'rgba(253, 126, 20, 0.8)'
            ],
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: { position: 'bottom' },
            tooltip: {
              callbacks: {
                label: function(context) {
                  const label = context.label || '';
                  const value = context.raw || 0;
                  const total = context.dataset.data.reduce((a, b) => a + b, 0);
                  const percentage = Math.round((value / total) * 100);
                  return `${label}: ${value} (${percentage}%)`;
                }
              }
            }
          }
        }
      });
    }

    // Gráfico de ingredientes más usados
    function updateTopIngredientsChart(recipes) {
      const ingredientCounts = {};
      recipes.forEach(recipe => {
        recipe.ingredients.forEach(ing => {
          if (ingredientCounts[ing.name]) {
            ingredientCounts[ing.name]++;
          } else {
            ingredientCounts[ing.name] = 1;
          }
        });
      });

      const sortedIngredients = Object.entries(ingredientCounts)
        .sort((a, b) => b[1] - a[1])
        .slice(0, 5);

      const ctx = document.getElementById('topIngredientsChart').getContext('2d');
      
      if (topIngredientsChart) {
        topIngredientsChart.destroy();
      }

      topIngredientsChart = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: sortedIngredients.map(i => i[0]),
          datasets: [{
            label: 'Recetas que lo usan',
            data: sortedIngredients.map(i => i[1]),
            backgroundColor: 'rgba(28, 200, 138, 0.8)',
            borderColor: 'rgba(28, 200, 138, 1)',
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            y: {
              beginAtZero: true,
              precision: 0
            }
          },
          plugins: {
            legend: { display: false }
          }
        }
      });
    }

    // Función para actualizar sección de insumos
    function updateInsumosSection(recipes, insumos) {
      // Gráfico de distribución por categoría
      updateCategoriasInsumosChart(insumos);
      
      // Tabla de insumos más usados
      updateTopInsumosTable(recipes);
    }

    // Gráfico de categorías de insumos
    function updateCategoriasInsumosChart(insumos) {
      const categoriasCount = {};
      insumos.forEach(insumo => {
        categoriasCount[insumo.categoria] = (categoriasCount[insumo.categoria] || 0) + 1;
      });
      
      const ctx = document.getElementById('categoriasInsumosChart').getContext('2d');
      
      if (categoriasInsumosChart) {
        categoriasInsumosChart.destroy();
      }

      categoriasInsumosChart = new Chart(ctx, {
        type: 'doughnut',
        data: {
          labels: Object.keys(categoriasCount),
          datasets: [{
            data: Object.values(categoriasCount),
            backgroundColor: [
              'rgba(78, 115, 223, 0.8)',
              'rgba(28, 200, 138, 0.8)',
              'rgba(54, 185, 204, 0.8)',
              'rgba(246, 194, 62, 0.8)',
              'rgba(231, 74, 59, 0.8)',
              'rgba(111, 66, 193, 0.8)',
              'rgba(253, 126, 20, 0.8)'
            ],
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: { position: 'right' }
          }
        }
      });
    }

    // Tabla de insumos más usados
    function updateTopInsumosTable(recipes) {
      const ingredientCounts = {};
      recipes.forEach(recipe => {
        recipe.ingredients.forEach(ing => {
          if (ingredientCounts[ing.name]) {
            ingredientCounts[ing.name].count++;
          } else {
            ingredientCounts[ing.name] = {
              count: 1,
              categoria: ing.categoria || 'Desconocida'
            };
          }
        });
      });

      const sortedIngredients = Object.entries(ingredientCounts)
        .sort((a, b) => b[1].count - a[1].count)
        .slice(0, 5);

      const tableBody = document.getElementById('topInsumosTable');
      tableBody.innerHTML = '';
      
      sortedIngredients.forEach(([nombre, data]) => {
        const row = document.createElement('tr');
        row.innerHTML = `
          <td>${nombre}</td>
          <td><span class="badge bg-secondary">${data.categoria}</span></td>
          <td>${data.count}</td>
        `;
        tableBody.appendChild(row);
      });
    }

    // Función para actualizar sección de gastos
    function updateGastosSection(gastos) {
      // Gráfico de gastos por tipo
      updateGastosPorTipoChart(gastos);
      
      // Gráfico de gastos por mes
      updateGastosPorMesChart(gastos);
      
      // Tabla de últimos gastos
      updateUltimosGastosTable(gastos);
    }

    // Gráfico de gastos por tipo
    function updateGastosPorTipoChart(gastos) {
      const tiposGasto = {
        'fijo negocio': 0,
        'variable negocio': 0,
        'deuda': 0
      };

      gastos.forEach(gasto => {
        if (gasto.tipoGasto in tiposGasto) {
          tiposGasto[gasto.tipoGasto] += parseFloat(gasto.montoTotal || 0);
        }
      });

      const ctx = document.getElementById('gastosPorTipoChart').getContext('2d');
      
      if (gastosPorTipoChart) {
        gastosPorTipoChart.destroy();
      }

      gastosPorTipoChart = new Chart(ctx, {
        type: 'pie',
        data: {
          labels: Object.keys(tiposGasto).map(t => {
            if (t === 'fijo negocio') return 'Fijos';
            if (t === 'variable negocio') return 'Variables';
            return 'Deudas';
          }),
          datasets: [{
            data: Object.values(tiposGasto),
            backgroundColor: [
              'rgba(78, 115, 223, 0.8)',
              'rgba(28, 200, 138, 0.8)',
              'rgba(231, 74, 59, 0.8)'
            ],
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: { position: 'bottom' }
          }
        }
      });
    }

    // Gráfico de gastos por mes
    function updateGastosPorMesChart(gastos) {
      const now = new Date();
      const meses = {};
      const mesesLabels = [];
      
      // Preparar los últimos 6 meses
      for (let i = 5; i >= 0; i--) {
        const date = new Date(now);
        date.setMonth(date.getMonth() - i);
        const mes = date.toLocaleString('default', { month: 'long' });
        meses[mes] = 0;
        mesesLabels.push(mes);
      }
      
      // Sumar gastos por mes
      gastos.forEach(gasto => {
        const fecha = new Date(gasto.fecha || new Date());
        const mes = fecha.toLocaleString('default', { month: 'long' });
        
        if (mes in meses) {
          meses[mes] += parseFloat(gasto.montoTotal || 0);
        }
      });

      const ctx = document.getElementById('gastosPorMesChart').getContext('2d');
      
      if (gastosPorMesChart) {
        gastosPorMesChart.destroy();
      }

      gastosPorMesChart = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: mesesLabels,
          datasets: [{
            label: 'Total Gastado',
            data: Object.values(meses),
            backgroundColor: 'rgba(246, 194, 62, 0.8)',
            borderColor: 'rgba(246, 194, 62, 1)',
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            y: {
              beginAtZero: true
            }
          }
        }
      });
    }

    // Tabla de últimos gastos
    function updateUltimosGastosTable(gastos) {
      const tableBody = document.getElementById('ultimosGastosTable');
      tableBody.innerHTML = '';
      
      // Ordenar por fecha (más recientes primero)
      const sortedGastos = [...gastos].sort((a, b) => {
        const dateA = new Date(a.fecha || 0);
        const dateB = new Date(b.fecha || 0);
        return dateB - dateA;
      }).slice(0, 5);
      
      sortedGastos.forEach(gasto => {
        const row = document.createElement('tr');
        row.innerHTML = `
          <td>${new Date(gasto.fecha || new Date()).toLocaleDateString()}</td>
          <td>${gasto.conceptoGasto || 'Sin concepto'}</td>
          <td>${gasto.establecimiento || 'Sin establecimiento'}</td>
          <td>$${parseFloat(gasto.montoTotal || 0).toFixed(2)}</td>
        `;
        tableBody.appendChild(row);
      });
    }

    // Función para cambiar entre tema claro/oscuro
    function toggleTheme() {
      const currentTheme = document.documentElement.getAttribute('data-bs-theme');
      const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
      document.documentElement.setAttribute('data-bs-theme', newTheme);
      
      // Cambiar icono
      const themeIcon = document.querySelector('[onclick="toggleTheme()"] i');
      themeIcon.classList.toggle('bi-moon-stars');
      themeIcon.classList.toggle('bi-sun');
      
      // Guardar preferencia
      localStorage.setItem('theme', newTheme);
      
      // Recargar gráficos para que se adapten al nuevo tema
      loadAllData();
    }

    // Inicializar la página cuando se carga
    document.addEventListener('DOMContentLoaded', function() {
      // Cargar tema guardado
      const savedTheme = localStorage.getItem('theme') || 'light';
      document.documentElement.setAttribute('data-bs-theme', savedTheme);
      
      // Ajustar icono del tema
      const themeIcon = document.querySelector('[onclick="toggleTheme()"] i');
      if (savedTheme === 'dark') {
        themeIcon.classList.remove('bi-moon-stars');
        themeIcon.classList.add('bi-sun');
      }
      
      // Cargar todos los datos
      loadAllData();
    });
  </script>
</body>
</html>